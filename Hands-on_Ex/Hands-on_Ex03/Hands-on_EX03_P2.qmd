---
title: "Hands-on_Ex03 Part 2 : Programming Animated Statistical Graphics with R"
---

4.1 Overview

This section will use **gganimate** and **plotly r** packages to create animated data visualisation At the same time, I will also learn how to (i) reshape data by using **tidyr** package, and (ii) process, wrangle and transform data by using **dplyr** package.

4.2 Installing R pacakges

```{r}
pacman::p_load(readxl, gifski, gapminder,
               plotly, gganimate, tidyverse)
```

4.2.1 Importing the data

```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_at(col, as.factor) %>%
  mutate(Year = as.integer(Year))
```

4.3 By using gganimate methods

-   transition\_*() defines how the data should be spread out and how it relates to itself across time.*

-   *view\_*() defines how the positional scales should change along the animation.

-   shadow\_*() defines how data from other points in time should be presented in the given point in time.*

-   *enter\_*()/exit\_\*() defines how new data should appear and how old data should disappear during the course of the animation.

-   ease_aes() defines how different aesthetics should be eased during transitions

4.3.1 Building a static population bubble plot

```{r}
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') 
```

4.3.2 Building the animated bubble plot

-   transition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).

-   ease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.

```{r}
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') +
  transition_time(Year) +       
  ease_aes('linear')          
```

4.4.1 Animated Data Visualisation: plotly

```{r}
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young')

ggplotly(gg)

```

-   Appropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.

-   ggplotly() is then used to convert the R graphic object into an animated svg object.


4.4.2 Building an animated bubble plot: plot_ly() method
```{r}
bp <- globalPop %>%
  plot_ly(x = ~Old, 
          y = ~Young, 
          size = ~Population, 
          color = ~Continent,
          sizes = c(2, 100),
          frame = ~Year, 
          text = ~Country, 
          hoverinfo = "text",
          type = 'scatter',
          mode = 'markers'
          ) %>%
  layout(showlegend = FALSE)
bp
```

